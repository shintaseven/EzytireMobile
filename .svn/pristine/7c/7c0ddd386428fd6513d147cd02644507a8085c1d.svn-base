
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Emit;
using System.Text;
using AppProtoype.Models;
using AppProtoype.ViewModels;
using Xamarin.Forms;

namespace AppProtoype
{
    public class OfferPage : ContentPage
    {
        ListView listView;

        public OfferPage(int couponID = 0)
        {
            Title = "Offers";

            CouponModelData sliderCollection = new CouponModelData();
            List<CouponModel> sliderImages = sliderCollection.SliderCollection.ToList();
            CouponModel currentCoupon = new CouponModel();

            listView = new ListView { HasUnevenRows = true, SeparatorVisibility = SeparatorVisibility.None, BackgroundColor = Color.Transparent };

            if (couponID > 0)
            {
                currentCoupon = sliderImages.Find(c => c.CouponID == couponID);

                if (currentCoupon != null)
                {
                    List<CouponModel> singleSourceList = new List<CouponModel>();
                    singleSourceList.Add(currentCoupon);
                    listView.ItemsSource = singleSourceList;

                    listView.ItemTemplate = BuildSingleOfferDataTemplate();
                    listView.GestureRecognizers.Add(new TapGestureRecognizer());

                }
                else
                {
                    listView.ItemSelected += OnItemSelected;
                    listView.ItemTemplate = BuildCellViewDataTemplate();
                    listView.ItemsSource = sliderImages;
                }
            }
            else
            {
                listView.ItemSelected += OnItemSelected;
                listView.ItemTemplate = BuildCellViewDataTemplate();
                listView.ItemsSource = sliderImages;
            }

            Content = new StackLayout
            {
                Children = {
                    listView
                }
            };

            Padding = new Thickness(20, Device.OnPlatform(40, 20, 20), 20, 20);
            BackgroundImage = "bg-inner.jpg";
        }

        private DataTemplate BuildSingleOfferDataTemplate()
        {
            DataTemplate couponItemTemplate = new DataTemplate(() => {

                var nativeCell = new CouponViewModel();
                nativeCell.SetBinding(CouponViewModel.ImageCaptionProperty, "ImageCaption");
                nativeCell.SetBinding(CouponViewModel.ImageUrlProperty, "ImageUrl");

                Image couponImage = new Image();
                couponImage.SetBinding(Image.SourceProperty, "ImageUrl");

                Label couponLabel = new Label();
                couponLabel.VerticalOptions = LayoutOptions.Center;
                couponLabel.SetBinding(Label.TextProperty, "ImageCaption");
                couponLabel.FontSize = 14;

                Label couponDetails = new Label();
                couponDetails.VerticalOptions = LayoutOptions.Center;
                couponDetails.SetBinding(Label.TextProperty, "MoreDetails");
                couponDetails.FontSize = 12;


                var stackLayout = new StackLayout
                {
                    Padding = new Thickness(5, 5, 5, 5),
                    Orientation = StackOrientation.Vertical,
                    BackgroundColor = Color.Gray,
                    Children = {
                        couponImage,
                        couponLabel,
                        couponDetails
                    }
                };

                nativeCell.View = stackLayout;

                return nativeCell;

            });

            return couponItemTemplate;
        }

        private DataTemplate BuildCellViewDataTemplate()
        {
            DataTemplate couponItemTemplate = new DataTemplate(() => {

                var nativeCell = new CouponViewModel();
                nativeCell.SetBinding(CouponViewModel.ImageCaptionProperty, "ImageCaption");
                nativeCell.SetBinding(CouponViewModel.ImageUrlProperty, "ImageUrl");

                Image couponImage = new Image();
                couponImage.SetBinding(Image.SourceProperty, "ImageUrl");

                Label couponLabel = new Label();
                couponLabel.VerticalOptions = LayoutOptions.Center;
                couponLabel.SetBinding(Label.TextProperty, "ImageCaption");
                couponLabel.FontSize = 14;

                var stackLayout = new StackLayout
                {
                    Padding = new Thickness(5, 5, 5, 5),
                    Orientation = StackOrientation.Vertical,
                    Children = {
                        couponImage,
                        couponLabel
                    }
                };

                nativeCell.View = stackLayout;

                return nativeCell;

            });

            return couponItemTemplate;
        }

        async void OnItemSelected(object sender, SelectedItemChangedEventArgs e)
        {
            if (e.SelectedItem == null)
            {
                return;
            }

            // Deselect row
            listView.SelectedItem = null;

            dynamic coupon = e.SelectedItem;

            await Navigation.PushAsync(new OfferPage(coupon.CouponID));
            
        }

        async void ExitOfferPage(object sender, EventArgs e)
        {
            MainPage main = new MainPage();
            await Navigation.PopModalAsync();
        }
    }
}
