using AppProtoype.Models;
using AppProtoype.ViewModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Emit;
using System.Text;

using Xamarin.Forms;
using XLabs.Forms.Controls;
using XLabs;

namespace AppProtoype
{
    public class AppointmentPage : ContentPage
    {
        ListView contentListView;
        int _currentStep = 1;

        public List<StoreModel> StoreModelList { get; set; }
        public List<string> SelectedServices { get; set; }
        public StoreModel CurrentStore { get; set; }
        public AppointmentDetails CurrentAppointment {get; set;}

        public AppointmentPage(int storeID = 0, int prevStep = 0, AppointmentDetails appointment = null, List<string> services = null)
        {
            _currentStep = ++prevStep;
            StoreModelData storeCollection = new StoreModelData();
            StoreModelList = new List<StoreModel>();
            StoreModelList = storeCollection.StoreCollection.ToList();

            Title = "SCHEDULE APPOINTMENT";

            Label stepTitle = new Label();
            stepTitle.VerticalOptions = LayoutOptions.Center;
            stepTitle.HorizontalOptions = LayoutOptions.Start;
            stepTitle.Text = GetStepLabelString();
            stepTitle.TextColor = Color.White;
            stepTitle.FontSize = 16;
            stepTitle.FontAttributes = FontAttributes.Bold;
            stepTitle.Margin = new Thickness(20, 20, 0, 0);

            if (storeID == 0)
            {

                contentListView = new ListView { HasUnevenRows = true, BackgroundColor = Color.Transparent, SeparatorColor = Color.White, HorizontalOptions = LayoutOptions.FillAndExpand };

                contentListView.ItemSelected += OnItemSelected;
                contentListView.ItemTemplate = BuildCellViewDataTemplate();
                contentListView.ItemsSource = StoreModelList;

                

                Content = new StackLayout
                {
                    Children = {
                        stepTitle,
                        contentListView
                    }
                };
            }
            else
            {
                if (appointment == null)
                {
                    appointment = new AppointmentDetails();
                }
                else
                {

                    CurrentAppointment = appointment;
                }

                CurrentStore = StoreModelList.Find(s => s.StoreID == storeID);

                if (CurrentStore == null) return;

                switch (_currentStep)
                {
                    case 2: GotoStep2(stepTitle);
                        break;
                    case 3: GoToStep3(stepTitle);
                        break;
                }
                 
            }
            Padding = new Thickness(0, 0, 0, 20);

            BackgroundImage = "bg-inner.jpg";
        }

        private void GotoStep2(Label stepTitle)
        {
            SelectedServices = new List<string>();
            StackLayout step2Stack = BuildStep2View(stepTitle);

            Content = new StackLayout
            {
                Children = {
                        step2Stack


                    }
            };
        }

        private void GoToStep3(Label stepTitle)
        {
            StackLayout step3Stack = BuildStep3View(stepTitle);

            Content = new StackLayout
            {
                Children = {
                        step3Stack


                    }
            };
        }

        
        private DataTemplate BuildCellViewDataTemplate()
        {
            DataTemplate couponItemTemplate = new DataTemplate(() => {
                var nativeCell = new StoreViewModel();


                Label storeTitleLabel = new Label();
                storeTitleLabel.VerticalOptions = LayoutOptions.Center;
                storeTitleLabel.SetBinding(Label.TextProperty, "StoreName");
                storeTitleLabel.FontSize = 14;

                Image arrowImage = new Image();
                arrowImage.Source = "offerarwbg.png";

                nativeCell.SetBinding(StoreViewModel.Address1Property, "Address1");
                nativeCell.SetBinding(StoreViewModel.CityProperty, "City");
                nativeCell.SetBinding(StoreViewModel.StateProperty, "State");
                nativeCell.SetBinding(StoreViewModel.ZipCodeProperty, "ZipCode");

                Label addressLabel = new Label();
                addressLabel.VerticalOptions = LayoutOptions.Start;
                addressLabel.HorizontalOptions = LayoutOptions.Start;
                addressLabel.SetBinding(Label.TextProperty, "AddressDisplay");
                addressLabel.FontSize = 12;
                addressLabel.TextColor = Color.FromHex("#A7A7A7");
                //addressLabel.HeightRequest = 50;
                Label contactLabel = new Label();

                Label phoneDisplay = new Label();
                phoneDisplay.VerticalOptions = LayoutOptions.Start;
                phoneDisplay.HorizontalOptions = LayoutOptions.Start;
                phoneDisplay.SetBinding(Label.TextProperty, "PhoneDisplay");
                phoneDisplay.FontSize = 12;
                phoneDisplay.TextColor = Color.FromHex("#A7A7A7");


                RelativeLayout layout = new RelativeLayout();
                //layout.BackgroundColor = Color.Blue;
                layout.Children.Add(arrowImage,
                    Constraint.Constant(0),
                    Constraint.Constant(0),
                    Constraint.RelativeToParent((parent) => { return parent.Width - 50; }),
                    Constraint.RelativeToParent((parent) => { return parent.Height; }));

                layout.Children.Add(storeTitleLabel,
                    Constraint.Constant(0),
                    Constraint.Constant(0),
                    Constraint.RelativeToParent((parent) => { return parent.Width; }),
                    Constraint.RelativeToParent((parent) => { return parent.Height; }));

                var secondColStack = new StackLayout
                {
                    Padding = new Thickness(20, 5, 5, 5),
                    Orientation = StackOrientation.Vertical,
                    HorizontalOptions = LayoutOptions.FillAndExpand,
                    Children = {
                        layout,
                        addressLabel,
                        phoneDisplay
                    }
                };

                nativeCell.View = secondColStack;
                nativeCell.ForceUpdateSize();

                return nativeCell;

            });

            return couponItemTemplate;
        }

        private StackLayout BuildStep2View(Label stepLabel)
        {
            Label storeDetails = BuildCurrentSelections();

            var storeStack = new StackLayout
            {
                VerticalOptions = LayoutOptions.Start,
                BackgroundColor = Color.Black,
                Children = {
                        stepLabel,
                        storeDetails
                    }
            };


            var servicesStack = new StackLayout
            {
                Padding = new Thickness(10, 10, 0, 0),
                Orientation = StackOrientation.Vertical,
                HorizontalOptions = LayoutOptions.FillAndExpand,
            };

            ServiceModelData servicesCollection = new ServiceModelData();
            List<ServiceModel> services = servicesCollection.ServiceCollection.ToList();
            foreach (ServiceModel service in services.Where(s => s.RetailerID == CurrentStore.StoreID))
            {

                CheckBox cbox = new CheckBox();
                cbox.DefaultText = service.ServiceName;
                cbox.TextColor = Color.White;
                cbox.StyleId = service.ServiceID.ToString();
                cbox.CheckedChanged += OnCheckboxSelected;

                servicesStack.Children.Add(cbox);
            }

            ImageButton serviceNextButton = new ImageButton();
            serviceNextButton.BackgroundColor = Color.Yellow;
            serviceNextButton.Text = "NEXT";
            serviceNextButton.TextColor = Color.Black;
            serviceNextButton.Margin = 50;
            serviceNextButton.Clicked += GoToStep3;

            var mainContentStack = new StackLayout
            {
                Orientation = StackOrientation.Vertical,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                
                Children = {
                    storeStack,
                    servicesStack,
                    serviceNextButton
                    }
            };

            return mainContentStack;
        }

        private StackLayout BuildStep3View(Label stepLabel)
        {
            Label summaryDetails = BuildCurrentSelections();

            var mainContentStack = new StackLayout
            {
                Orientation = StackOrientation.Vertical,
                HorizontalOptions = LayoutOptions.FillAndExpand,

                Children = {
                        summaryDetails
                    }
            };

            return mainContentStack;

        }

        private Label BuildCurrentSelections()
        {
            Label currentSelections = new Label();
            string currentStoreText = string.Empty;
            switch (_currentStep)
            {
                case 2:
                    currentStoreText = @"Location: "
                                        + "\n"
                                        + CurrentStore.StoreName + "\n"
                                        + CurrentStore.AddressDisplay;

                    currentSelections.Text = currentStoreText;
                    currentSelections.VerticalOptions = LayoutOptions.Center;
                    currentSelections.TextColor = Color.White;
                    currentSelections.FontSize = 14;
                    currentSelections.Margin = new Thickness(20, 0, 0, 10);
                    return currentSelections;

                case 3:
                    currentStoreText = @"Location: "
                                    + "\n"
                                    + CurrentStore.StoreName + "\n"
                                    + CurrentStore.AddressDisplay;

                    currentSelections.Text = currentStoreText;
                    currentSelections.VerticalOptions = LayoutOptions.Center;
                    currentSelections.TextColor = Color.White;
                    currentSelections.FontSize = 14;
                    currentSelections.Margin = new Thickness(20, 0, 0, 10);
                    return currentSelections;
            }
            

            return currentSelections;
        }

        private string GetStepLabelString()
        {
            switch (_currentStep)
            {
                case 1: return "SELECT LOCATION";
                case 2: return "SELECT SERVICES";
                case 3: return "SELECT DATE AND TIME";
                case 4: return "CONTACT DETAILS";
                case 5: return "VEHICLE DETAILS";
                case 6: return "CONFIRM DETAILS";
                default: return "";
            }
        }

        async void GoToStep3(object sender, EventArgs e)
        {
            AppointmentDetails appointment = new AppointmentDetails();


            await Navigation.PushAsync(new AppointmentPage(CurrentStore.StoreID, _currentStep, appointment, SelectedServices));
        }

        private void OnCheckboxSelected(object sender, EventArgs<bool> e)
        {
            CheckBox isCheckedOrNot = (CheckBox)sender;
            if (isCheckedOrNot.Checked)
            {
                if (!SelectedServices.Contains(isCheckedOrNot.StyleId))
                {
                    SelectedServices.Add(isCheckedOrNot.StyleId);
                }
            }
            else
            {
                if (SelectedServices.Contains(isCheckedOrNot.StyleId))
                {
                    SelectedServices.Remove(isCheckedOrNot.StyleId);
                }
            }
        }

        async void OnItemSelected(object sender, SelectedItemChangedEventArgs e)
        {
            if (e.SelectedItem == null)
            {
                return;
            }

            // Deselect row
            contentListView.SelectedItem = null;

            dynamic store = e.SelectedItem;

            await Navigation.PushAsync(new AppointmentPage(store.StoreID, _currentStep));

        }
    }
}
